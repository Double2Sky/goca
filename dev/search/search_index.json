{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Goca is a FOCA fork written in Go, which is a tool used mainly to find metadata and hidden information in the documents its scans. These documents may be on web pages, and can be downloaded and analyzed with Goca. It is capable of analyzing a wide variety of documents, with the most common being Microsoft Office, Open Office, or PDF files, although it also analyzes Adobe InDesign or SVG files, for instance. These documents are searched for using search engines such as: Google Bing DuckDuckGo Then downloads the documents and extracts the metadata information from graphic files, and a complete analysis of the information discovered through the URL is conducted even before downloading the file. GOCA ( G et O rganizations with C ollected A rchives) is used mainly to find metadata and hidden information in documents found in open sources. Those documents are mainly on web pages, and they ara downloaded and analyzed with Goca. Documents are searched for using three possible search engines: Google , Bing , and DuckDuckGo . Using those engines Goca adquieres lots of documents that helps Goca to extract its metadata building up a huge profile about the target. Furthermore Goca can perform the same analysis from a local bunch of files. In terms to build a complete profile from all data extracted from all files, Goca matches information in an attempt to identify which documents have been created by the same team and what servers and clients may be infered from them. About this project \u00b6 This project has no intention on damaging the FOCA project, developed and mantained by Eleven Paths . This is a fork written in Go with the only intention of enjoy developing a new tool and make it portable to other distributions without dependencies of any kind to build it. The logo of GOCA is just a modification of the old FOCA logo with the Golang Gopher face. The original Gopher was designed by Renee French .","title":"Welcome"},{"location":"#welcome","text":"Goca is a FOCA fork written in Go, which is a tool used mainly to find metadata and hidden information in the documents its scans. These documents may be on web pages, and can be downloaded and analyzed with Goca. It is capable of analyzing a wide variety of documents, with the most common being Microsoft Office, Open Office, or PDF files, although it also analyzes Adobe InDesign or SVG files, for instance. These documents are searched for using search engines such as: Google Bing DuckDuckGo Then downloads the documents and extracts the metadata information from graphic files, and a complete analysis of the information discovered through the URL is conducted even before downloading the file. GOCA ( G et O rganizations with C ollected A rchives) is used mainly to find metadata and hidden information in documents found in open sources. Those documents are mainly on web pages, and they ara downloaded and analyzed with Goca. Documents are searched for using three possible search engines: Google , Bing , and DuckDuckGo . Using those engines Goca adquieres lots of documents that helps Goca to extract its metadata building up a huge profile about the target. Furthermore Goca can perform the same analysis from a local bunch of files. In terms to build a complete profile from all data extracted from all files, Goca matches information in an attempt to identify which documents have been created by the same team and what servers and clients may be infered from them.","title":"Welcome"},{"location":"#about-this-project","text":"This project has no intention on damaging the FOCA project, developed and mantained by Eleven Paths . This is a fork written in Go with the only intention of enjoy developing a new tool and make it portable to other distributions without dependencies of any kind to build it. The logo of GOCA is just a modification of the old FOCA logo with the Golang Gopher face. The original Gopher was designed by Renee French .","title":"About this project"},{"location":"configuration-file/","text":"Configuration file \u00b6 Goca uses a simple comfiguration file, it is a TOML file. That format is quite similar to INI format. We have decided to have an entry per each command that Goca is able to execute plus an entry fot the global options or flags. You can see an example below. [global] useragent = \"Goca Metadata Scanner\" loglevel = \"info\" # Values are: info (3), warn (2), error (1), debug (4) threads = 1 plugins = [ \"all\" ] # Values are mimetype [scrapper] domain = \"example.com\" depth = 1 # How many links levels to dig threshold = 1 # Time between requests save = false # Save downloaded assets [dorker] term = \"goca\" maxpages = 1 # Maximum number of pages threshold = 1 # Time between requests engines = [ \"all\" ] # Search engines to dork save = false # Save downloaded assets [database] file = \"\" [plugin] list = false Goca will look up the configuration file in: $HOME/<basefolder>/gocacfg.toml ./gocacfg.toml Working with the configuratoin file \u00b6 The configuration file can be filled completely or just with those values that are static for you. You can run Goca without issue the predefined flags in the configuration file. If you want to dork the term Goca you usually run Goca like this: ./goca dorker --term Goca But, configure that term in the configuration file like this: [dorker] term = \"goca\" You will run Goca without --term flag instead. ./goca dorker","title":"Configuration File"},{"location":"configuration-file/#configuration-file","text":"Goca uses a simple comfiguration file, it is a TOML file. That format is quite similar to INI format. We have decided to have an entry per each command that Goca is able to execute plus an entry fot the global options or flags. You can see an example below. [global] useragent = \"Goca Metadata Scanner\" loglevel = \"info\" # Values are: info (3), warn (2), error (1), debug (4) threads = 1 plugins = [ \"all\" ] # Values are mimetype [scrapper] domain = \"example.com\" depth = 1 # How many links levels to dig threshold = 1 # Time between requests save = false # Save downloaded assets [dorker] term = \"goca\" maxpages = 1 # Maximum number of pages threshold = 1 # Time between requests engines = [ \"all\" ] # Search engines to dork save = false # Save downloaded assets [database] file = \"\" [plugin] list = false Goca will look up the configuration file in: $HOME/<basefolder>/gocacfg.toml ./gocacfg.toml","title":"Configuration file"},{"location":"configuration-file/#working-with-the-configuratoin-file","text":"The configuration file can be filled completely or just with those values that are static for you. You can run Goca without issue the predefined flags in the configuration file. If you want to dork the term Goca you usually run Goca like this: ./goca dorker --term Goca But, configure that term in the configuration file like this: [dorker] term = \"goca\" You will run Goca without --term flag instead. ./goca dorker","title":"Working with the configuratoin file"},{"location":"getting-started/install-goca/","text":"Install Goca \u00b6 Goca is an open-source tool an can be acced to through it GitHub site. But if you don't care about source code and you only want to use Goca, just use one of the option that best fit you. From GitHub \u00b6 Goca team generates a set of executables ready to be used. Those Goca binaries are avaliable from GitHub release page https://github.com/gocaio/goca/releases . From repository \u00b6 From source \u00b6 This is the hard way to get Goca, usually this is for developers. However it does not matter if you are a developer or not, as far as you want to collaborate with us, obviosly we will appreciate a lot. There are some requirements that needs to be meat before compiling Goca. First of all you need to have the Go compiler installed. You can follow instructions from the Golang official webpage https://golang.org . Once Go is installed you have to clone the Goca reposity. git clone git@github.com:gocaio/goca.git Finally, you can build Goca just by running the following command from the project folder. go build -o goca *.go That command will produce a Goca binary called goca that you can just use. If you can execute the produced binary you are ready to go. Use you favorite editor and issue your new features. The Goca team encourage you to share your features with the community.","title":"Install Goca"},{"location":"getting-started/install-goca/#install-goca","text":"Goca is an open-source tool an can be acced to through it GitHub site. But if you don't care about source code and you only want to use Goca, just use one of the option that best fit you.","title":"Install Goca"},{"location":"getting-started/install-goca/#from-github","text":"Goca team generates a set of executables ready to be used. Those Goca binaries are avaliable from GitHub release page https://github.com/gocaio/goca/releases .","title":"From GitHub"},{"location":"getting-started/install-goca/#from-repository","text":"","title":"From repository"},{"location":"getting-started/install-goca/#from-source","text":"This is the hard way to get Goca, usually this is for developers. However it does not matter if you are a developer or not, as far as you want to collaborate with us, obviosly we will appreciate a lot. There are some requirements that needs to be meat before compiling Goca. First of all you need to have the Go compiler installed. You can follow instructions from the Golang official webpage https://golang.org . Once Go is installed you have to clone the Goca reposity. git clone git@github.com:gocaio/goca.git Finally, you can build Goca just by running the following command from the project folder. go build -o goca *.go That command will produce a Goca binary called goca that you can just use. If you can execute the produced binary you are ready to go. Use you favorite editor and issue your new features. The Goca team encourage you to share your features with the community.","title":"From source"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6 Goca works based in commands, some of them are used for proyect management like database , others gives information about Goca configuration and finaly there are commandas to perform OSINT actions such as dorker and scrapper . A simple dork for the term Goca : >$ .goca dorker --term Goca INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected engines: all ] INFO [ 0001 ] [ Found a total of 14 links ] You can run a specific set of engines for analysing files. >$ ./goca dorker --term Goca --engines Google,Bing INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected engines: [ Google Bing ]] INFO [ 0001 ] [ Found a total of 14 links ] Engines and Plugins Seleccting engines will only run plugins build for that specifics engines. On the other hand, you can scrap a domain to analyze all its public information by running: >$ ./goca scrapper --domain goca.io INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Scrapping goca.io ] In both cases, scrapping and dorking, Goca accepts a plugin list flag so you can select what kind of metadata you want to extract and analyse. The followinf command will run all plugins configured for application/pdf against PDF files. >$ ./goca dorker --term Goca --plugins application/pdf INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected all engines ] INFO [ 0001 ] [ Found a total of 14 links ] Or, you might want to analyze JPG, DOC and PDF files. >$ ./goca dorker --term Goca --plugins application/pdf,image/jpeg,application/msword INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected all engines ] INFO [ 0001 ] [ Found a total of 14 links ]","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"Goca works based in commands, some of them are used for proyect management like database , others gives information about Goca configuration and finaly there are commandas to perform OSINT actions such as dorker and scrapper . A simple dork for the term Goca : >$ .goca dorker --term Goca INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected engines: all ] INFO [ 0001 ] [ Found a total of 14 links ] You can run a specific set of engines for analysing files. >$ ./goca dorker --term Goca --engines Google,Bing INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected engines: [ Google Bing ]] INFO [ 0001 ] [ Found a total of 14 links ] Engines and Plugins Seleccting engines will only run plugins build for that specifics engines. On the other hand, you can scrap a domain to analyze all its public information by running: >$ ./goca scrapper --domain goca.io INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Scrapping goca.io ] In both cases, scrapping and dorking, Goca accepts a plugin list flag so you can select what kind of metadata you want to extract and analyse. The followinf command will run all plugins configured for application/pdf against PDF files. >$ ./goca dorker --term Goca --plugins application/pdf INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected all engines ] INFO [ 0001 ] [ Found a total of 14 links ] Or, you might want to analyze JPG, DOC and PDF files. >$ ./goca dorker --term Goca --plugins application/pdf,image/jpeg,application/msword INFO [ 0000 ] [ Staring the mighty Goca v0.3.0 ] INFO [ 0000 ] [ Selected all engines ] INFO [ 0001 ] [ Found a total of 14 links ]","title":"Quick Start"},{"location":"plugins/development/","text":"Development \u00b6","title":"Development"},{"location":"plugins/development/#development","text":"","title":"Development"},{"location":"plugins/overview/","text":"Overview \u00b6","title":"Overview"},{"location":"plugins/overview/#overview","text":"","title":"Overview"}]}